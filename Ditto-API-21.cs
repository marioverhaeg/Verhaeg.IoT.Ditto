//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Verhaeg.IoT.Ditto.Api21
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DittoClient
    {
        private string _baseUrl = "https://ditto.eclipseprojects.io/api/2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public DittoClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Retrieve visible things or things with specified IDs
        /// </summary>
        /// <param name="ids">Contains a comma-separated list of `thingId`s to retrieve in one single request.</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The successfully completed request contains a list of the for the user available Things, or the Things asked for via the `ids` paramter.
        /// <br/>The Things are sorted either by their ID, or in the same order as the Thing IDs were provided in the `ids` parameter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Thing>> ThingsAllAsync(string ids, string fields, string timeout)
        {
            return ThingsAllAsync(ids, fields, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve visible things or things with specified IDs
        /// </summary>
        /// <param name="ids">Contains a comma-separated list of `thingId`s to retrieve in one single request.</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The successfully completed request contains a list of the for the user available Things, or the Things asked for via the `ids` paramter.
        /// <br/>The Things are sorted either by their ID, or in the same order as the Thing IDs were provided in the `ids` parameter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Thing>> ThingsAllAsync(string ids, string fields, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things?");
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Thing>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. At least one of the defined query parameters was invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 414)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed due to an URI length exceeding 8k characters.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new thing
        /// </summary>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="allow_policy_lockout">Defines whether a subject is allowed to create a policy without having WRITE permission on the policy
        /// <br/>resource of the created policy.
        /// <br/>
        /// <br/>The default (if ommited) is `false`.</param>
        /// <param name="namespace">Defines a custom namespace for the thing while generating a new thing ID.</param>
        /// <param name="body">JSON representation of the thing to be created. Use '{}' to create an empty thing with a default policy.</param>
        /// <returns>The thing was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Thing> ThingsPOSTAsync(string requested_acks, string timeout, bool? response_required, bool? allow_policy_lockout, string @namespace, NewThing body)
        {
            return ThingsPOSTAsync(requested_acks, timeout, response_required, allow_policy_lockout, @namespace, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new thing
        /// </summary>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="allow_policy_lockout">Defines whether a subject is allowed to create a policy without having WRITE permission on the policy
        /// <br/>resource of the created policy.
        /// <br/>
        /// <br/>The default (if ommited) is `false`.</param>
        /// <param name="namespace">Defines a custom namespace for the thing while generating a new thing ID.</param>
        /// <param name="body">JSON representation of the thing to be created. Use '{}' to create an empty thing with a default policy.</param>
        /// <returns>The thing was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Thing> ThingsPOSTAsync(string requested_acks, string timeout, bool? response_required, bool? allow_policy_lockout, string @namespace, NewThing body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things?");
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (allow_policy_lockout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allow-policy-lockout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allow_policy_lockout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@namespace != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("namespace") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Thing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` must not be set in the request body\n  * the JSON body of the thing to be created is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed.\nPossible reasons:\n  * the caller would not have access to the thing after creating it with the given policy.\n  * the caller has insufficient permissions.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller had insufficient permissions to read the referenced thing.\n  * the policy that should be copied does not exist.\n  * the caller had insufficient permissions to read the policy that should be copied.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.
        /// <br/>
        /// <br/>The option `live` is not available when a new thing should be created, only for updating an
        /// <br/>existing thing.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the specific thing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Thing> ThingsGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return ThingsGETAsync(thingId, fields, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.
        /// <br/>
        /// <br/>The option `live` is not available when a new thing should be created, only for updating an
        /// <br/>existing thing.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the specific thing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Thing> ThingsGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Thing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * at least one of the defined query parameters is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a thing with a specified ID
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="put_metadata">The `put-metadata` header, which sets Metadata information in the Thing.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the thing to be modified.</param>
        /// <returns>The thing was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Thing> ThingsPUTAsync(string thingId, string if_Match, string if_None_Match, System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<string, Anonymous>> put_metadata, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, NewThing body)
        {
            return ThingsPUTAsync(thingId, if_Match, if_None_Match, put_metadata, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a thing with a specified ID
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="put_metadata">The `put-metadata` header, which sets Metadata information in the Thing.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the thing to be modified.</param>
        /// <returns>The thing was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Thing> ThingsPUTAsync(string thingId, string if_Match, string if_None_Match, System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<string, Anonymous>> put_metadata, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, NewThing body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (put_metadata != null)
                        request_.Headers.TryAddWithoutValidation("put-metadata", ConvertToString(put_metadata, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Thing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The thing was successfully modified.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON body of the thing to be created/modified is invalid\n  * the JSON body of the thing to be created/modified contains a `thingId`\n  which does not match the ID in the path", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller would not have access to the thing after creating it with the given policy\n  * the caller has insufficient permissions.\n    For modifying an existing thing, an unrestricted `WRITE` permission on the thing\'s root resource is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to read the referenced thing.\n  * the policy that should be copied does not exist.\n  * the caller has insufficient permissions to read the policy that should be copied.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch a thing with a specified ID
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="put_metadata">The `put-metadata` header, which sets Metadata information in the Thing.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the thing to be patched.</param>
        /// <returns>The thing was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ThingsPATCHAsync(string thingId, string if_Match, string if_None_Match, System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<string, Anonymous>> put_metadata, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Body body)
        {
            return ThingsPATCHAsync(thingId, if_Match, if_None_Match, put_metadata, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a thing with a specified ID
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="put_metadata">The `put-metadata` header, which sets Metadata information in the Thing.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the thing to be patched.</param>
        /// <returns>The thing was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ThingsPATCHAsync(string thingId, string if_Match, string if_None_Match, System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<string, Anonymous>> put_metadata, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (put_metadata != null)
                        request_.Headers.TryAddWithoutValidation("put-metadata", ConvertToString(put_metadata, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the JSON body of the thing to be patched is invalid\n  * the JSON body of the thing to be patched contains a `thingId` which does not match the ID in the path", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller would not have access to the thing after creating it with the given policy\n  * the caller has insufficient permissions.\n    For modifying an existing thing, an unrestricted `WRITE` permission on the thing\'s root resource is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to read the referenced thing.\n  * the policy that should be copied does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The thing was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ThingsDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return ThingsDELETEAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The thing was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ThingsDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller had insufficient permissions.\n    For deleting an existing thing, an unrestricted `WRITE` permission on the thing\'s root resource is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the definition of the specific thing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> DefinitionGETAsync(string thingId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return DefinitionGETAsync(thingId, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the definition of the specific thing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> DefinitionGETAsync(string thingId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n* the `thingId` does not conform to the namespaced entity ID notation\n(see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the definition of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> DefinitionPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return DefinitionPUTAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> DefinitionPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The definition was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation\n    (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON was invalid\n  * the request body was not a JSON object.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying a definition of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON string representation of the definition to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON string.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/>  * a string: `"value"` - Currently the definition should follow the pattern: [_a-zA-Z0-9\-]:[_a-zA-Z0-9\-]:[_a-zA-Z0-9\-]
        /// <br/>  * an empty string: `""`
        /// <br/>  * `null`: the definition will be deleted</param>
        /// <returns>The definition was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefinitionPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body)
        {
            return DefinitionPATCHAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON string representation of the definition to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON string.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/>  * a string: `"value"` - Currently the definition should follow the pattern: [_a-zA-Z0-9\-]:[_a-zA-Z0-9\-]:[_a-zA-Z0-9\-]
        /// <br/>  * an empty string: `""`
        /// <br/>  * `null`: the definition will be deleted</param>
        /// <returns>The definition was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefinitionPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation\n    (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON was invalid\n  * the request body was not a JSON object.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying a definition of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefinitionDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return DefinitionDELETEAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the definition of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefinitionDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The `thingId` does not conform to the namespaced entity ID notation\n(see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying a definition of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or its definition was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the policy ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> PolicyIdGETAsync(string thingId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return PolicyIdGETAsync(thingId, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The request successfully returned the policy ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PolicyIdGETAsync(string thingId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/policyId?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">The policy is used for controlling access to this thing. It is managed by
        /// <br/>resource `/policies/{policyId}`.
        /// <br/>
        /// <br/>The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <returns>The policy ID was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PolicyIdPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body)
        {
            return PolicyIdPUTAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">The policy is used for controlling access to this thing. It is managed by
        /// <br/>resource `/policies/{policyId}`.
        /// <br/>
        /// <br/>The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <returns>The policy ID was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PolicyIdPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/policyId?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">The policy is used for controlling access to this thing. It is managed by resource `/policies/{policyId}`.
        /// <br/>
        /// <br/>The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <returns>The policy ID was successfully patched. Note: You will need to create the policy content separately.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PolicyIdPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body)
        {
            return PolicyIdPATCHAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch the policy ID of a thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">The policy is used for controlling access to this thing. It is managed by resource `/policies/{policyId}`.
        /// <br/>
        /// <br/>The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <returns>The policy ID was successfully patched. Note: You will need to create the policy content separately.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PolicyIdPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/policyId?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the `policyId` can not be removed from a thing.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all attributes of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields from the attributes to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the attributes by
        /// <br/>using a comma-separated list:
        /// <br/>  * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=model` would select only `model` attribute value (if present)
        /// <br/>      * `?fields=model,make` would select `model` and `make` attribute values (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=model,make,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=listOfAddresses/postal(city,street))`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The attributes of the specific thing were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Attributes> AttributesGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return AttributesGETAsync(thingId, fields, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all attributes of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields from the attributes to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the attributes by
        /// <br/>using a comma-separated list:
        /// <br/>  * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=model` would select only `model` attribute value (if present)
        /// <br/>      * `?fields=model,make` would select `model` and `make` attribute values (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=model,make,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=listOfAddresses/postal(city,street))`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The attributes of the specific thing were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Attributes> AttributesGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Attributes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n* the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update all attributes of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attributes were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Attributes> AttributesPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return AttributesPUTAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update all attributes of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attributes were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Attributes> AttributesPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Attributes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The attributes were successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the attributes to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the attributes of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch all attributes of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all attributes to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>  * a simple object: `{ "key": "value"}` - We strongly recommend to use a restricted set of characters for the key (identifier), as the key might be needed for the (URL) path later.&lt;br&gt; Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*
        /// <br/>  * a nested object as shown in the example value
        /// <br/>  * `null`: deletes all attributes</param>
        /// <returns>The attributes were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Attributes body)
        {
            return AttributesPATCHAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch all attributes of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all attributes to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>  * a simple object: `{ "key": "value"}` - We strongly recommend to use a restricted set of characters for the key (identifier), as the key might be needed for the (URL) path later.&lt;br&gt; Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*
        /// <br/>  * a nested object as shown in the example value
        /// <br/>  * `null`: deletes all attributes</param>
        /// <returns>The attributes were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesPATCHAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Attributes body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the attributes to be patched is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the attributes of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all attributes of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attributes were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return AttributesDELETEAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all attributes of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attributes were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting all attributes of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or its attributes were not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The attribute was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesGET2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return AttributesGET2Async(thingId, attributePath, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The attribute was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesGET2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (attributePath == null)
                throw new System.ArgumentNullException("attributePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes/{attributePath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attributePath}", System.Uri.EscapeDataString(ConvertToString(attributePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or\nthe attribute at the specified path was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesPUT2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return AttributesPUT2Async(thingId, attributePath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesPUT2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (attributePath == null)
                throw new System.ArgumentNullException("attributePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes/{attributePath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attributePath}", System.Uri.EscapeDataString(ConvertToString(attributePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying an attribute of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesPATCH2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return AttributesPATCH2Async(thingId, attributePath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesPATCH2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (attributePath == null)
                throw new System.ArgumentNullException("attributePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes/{attributePath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attributePath}", System.Uri.EscapeDataString(ConvertToString(attributePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying an attribute of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AttributesDELETE2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return AttributesDELETE2Async(thingId, attributePath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific attribute of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="attributePath">The path to the attribute, e.g. **manufacturer/name**</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The attribute was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AttributesDELETE2Async(string thingId, string attributePath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (attributePath == null)
                throw new System.ArgumentNullException("attributePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/attributes/{attributePath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attributePath}", System.Uri.EscapeDataString(ConvertToString(attributePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting a single attribute of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or the attribute at the specified path was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields from one or more features to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `{featureId}` The ID of the feature to select properties in
        /// <br/>  * `properties`
        /// <br/>    Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>      * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>        For example:
        /// <br/>          * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the feature identified with `{featureId}`
        /// <br/>          * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`
        /// <br/>    Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>      * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>      * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>        For example:
        /// <br/>         * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`
        /// <br/>         * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the feature identified with `{featureId}`
        /// <br/>
        /// <br/>
        /// <br/>#### Examples
        /// <br/>* `?fields=EnvironmentScanner/properties(temperature,humidity)`
        /// <br/>* `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The list of features of the specific thing were successfully
        /// <br/>retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Feature>> FeaturesGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return FeaturesGETAsync(thingId, fields, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="fields">Contains a comma-separated list of fields from one or more features to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `{featureId}` The ID of the feature to select properties in
        /// <br/>  * `properties`
        /// <br/>    Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>      * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>        For example:
        /// <br/>          * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the feature identified with `{featureId}`
        /// <br/>          * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`
        /// <br/>    Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>      * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>      * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>        For example:
        /// <br/>         * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`
        /// <br/>         * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the feature identified with `{featureId}`
        /// <br/>
        /// <br/>
        /// <br/>#### Examples
        /// <br/>* `?fields=EnvironmentScanner/properties(temperature,humidity)`
        /// <br/>* `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The list of features of the specific thing were successfully
        /// <br/>retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Feature>> FeaturesGETAsync(string thingId, string fields, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, Feature>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined query parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was\nnot found or the features have not been defined.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify all features of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all features to be modified at once. Consider that the value has to be a JSON object or null.
        /// <br/>
        /// <br/>Examples:
        /// <br/>* an empty object: {} - would just delete all old features
        /// <br/>* an empty feature: { "featureId": {} } - We strongly recommend to use a restricted set of characters
        /// <br/>  for the `featureId`, as it might be needed for the (URL) path later.
        /// <br/>
        /// <br/>  Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9-]*
        /// <br/>
        /// <br/>* a nested object with multiple features as shown in the example value field</param>
        /// <returns>The features were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Feature>> FeaturesPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IDictionary<string, Feature> body)
        {
            return FeaturesPUTAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify all features of a specific thing at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all features to be modified at once. Consider that the value has to be a JSON object or null.
        /// <br/>
        /// <br/>Examples:
        /// <br/>* an empty object: {} - would just delete all old features
        /// <br/>* an empty feature: { "featureId": {} } - We strongly recommend to use a restricted set of characters
        /// <br/>  for the `featureId`, as it might be needed for the (URL) path later.
        /// <br/>
        /// <br/>  Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9-]*
        /// <br/>
        /// <br/>* a nested object with multiple features as shown in the example value field</param>
        /// <returns>The features were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Feature>> FeaturesPUTAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IDictionary<string, Feature> body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, Feature>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The features were successfully modified.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying all features of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all features to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>* a nested object with multiple features as shown in the example value field
        /// <br/>
        /// <br/>* **Note**: To delete certain entries of a feature the `null` value can be used.
        /// <br/>  For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).</param>
        /// <returns>The features were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FeaturesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IDictionary<string, Feature> body)
        {
            return FeaturesPATCHAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all features to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>* a nested object with multiple features as shown in the example value field
        /// <br/>
        /// <br/>* **Note**: To delete certain entries of a feature the `null` value can be used.
        /// <br/>  For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).</param>
        /// <returns>The features were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FeaturesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IDictionary<string, Feature> body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying all features of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The features were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FeaturesDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return FeaturesDELETEAsync(thingId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all features of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The features were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FeaturesDELETEAsync(string thingId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting all features of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was\nnot found or the features have not been defined.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the selected feature to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `properties`
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=properties/color` would select only `color` property value (if present)
        /// <br/>        * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)
        /// <br/>       * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=properties(color,brightness)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The feature was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Feature> FeaturesGET2Async(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return FeaturesGET2Async(thingId, featureId, fields, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the selected feature to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `properties`
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=properties/color` would select only `color` property value (if present)
        /// <br/>        * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)
        /// <br/>       * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=properties(color,brightness)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The feature was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Feature> FeaturesGET2Async(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Feature>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined query parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or\nthe feature with the specified `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the feature to be created/modified.
        /// <br/>Consider that the value has to be a JSON object or null.
        /// <br/>
        /// <br/>Examples:
        /// <br/>* an empty object: {} - would just create the featureID but would delete all content of the feature
        /// <br/>* a nested object with multiple model definitions and multiple properties as shown in the example value field</param>
        /// <returns>The feature was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Feature> FeaturesPUT2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Feature body)
        {
            return FeaturesPUT2Async(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the feature to be created/modified.
        /// <br/>Consider that the value has to be a JSON object or null.
        /// <br/>
        /// <br/>Examples:
        /// <br/>* an empty object: {} - would just create the featureID but would delete all content of the feature
        /// <br/>* a nested object with multiple model definitions and multiple properties as shown in the example value field</param>
        /// <returns>The feature was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Feature> FeaturesPUT2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Feature body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Feature>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The feature was successfully modified.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying a single feature of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the feature to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>* a nested object with multiple model definitions and multiple properties as shown in the example value field
        /// <br/>* **Note**: To delete certain properties of a feature the `null` value can be used.
        /// <br/>  For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).</param>
        /// <returns>The feature was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FeaturesPATCH2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Feature body)
        {
            return FeaturesPATCH2Async(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON representation of the feature to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>
        /// <br/>Examples:
        /// <br/>* a nested object with multiple model definitions and multiple properties as shown in the example value field
        /// <br/>* **Note**: To delete certain properties of a feature the `null` value can be used.
        /// <br/>  For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).</param>
        /// <returns>The feature was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FeaturesPATCH2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, Feature body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying a single feature of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The feature was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FeaturesDELETE2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return FeaturesDELETE2Async(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The feature was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FeaturesDELETE2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting a single feature of an existing thing, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing with the given ID or the feature at the specified path was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The definition was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DefinitionAllGETAsync(string thingId, string featureId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return DefinitionAllGETAsync(thingId, featureId, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The definition was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DefinitionAllGETAsync(string thingId, string featureId, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined query parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no\ndefinition or the thing with the specified `thingId` or the feature\nwith `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON array of the complete definition to be updated.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON array or `null`.
        /// <br/>
        /// <br/>The content of the JSON array are strings in the format `"&lt;namespace&gt;:&lt;name&gt;:&lt;version&gt;"` or a valid HTTP(s) URL, which is enforced.</param>
        /// <returns>The definition was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DefinitionAllPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IEnumerable<string> body)
        {
            return DefinitionAllPUTAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON array of the complete definition to be updated.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON array or `null`.
        /// <br/>
        /// <br/>The content of the JSON array are strings in the format `"&lt;namespace&gt;:&lt;name&gt;:&lt;version&gt;"` or a valid HTTP(s) URL, which is enforced.</param>
        /// <returns>The definition was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DefinitionAllPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The definition was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the definition of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON array of the complete definition to be patched. Consider that the value has to be a JSON array.
        /// <br/>
        /// <br/>The content of the JSON array are strings in the format `"&lt;namespace&gt;:&lt;name&gt;:&lt;version&gt;"` or a valid HTTP(s) URL, which is enforced.
        /// <br/>To delete the definition use `null` as content in the request body.</param>
        /// <returns>The definition was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefinitionPATCH2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IEnumerable<string> body)
        {
            return DefinitionPATCH2Async(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON array of the complete definition to be patched. Consider that the value has to be a JSON array.
        /// <br/>
        /// <br/>The content of the JSON array are strings in the format `"&lt;namespace&gt;:&lt;name&gt;:&lt;version&gt;"` or a valid HTTP(s) URL, which is enforced.
        /// <br/>To delete the definition use `null` as content in the request body.</param>
        /// <returns>The definition was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefinitionPATCH2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the definition of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DefinitionDELETE2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return DefinitionDELETE2Async(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the definition of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The definition was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DefinitionDELETE2Async(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/definition?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting the definition of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no definition or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the properties to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the properties by
        /// <br/>using a comma-separated list:
        /// <br/>  * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=temperature` would select only `temperature` property value (if present)
        /// <br/>      * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=temperature,humidity,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=configuration,status(powerConsumption/watts)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The properties were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FeatureProperties> PropertiesGETAsync(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return PropertiesGETAsync(thingId, featureId, fields, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the properties to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the properties by
        /// <br/>using a comma-separated list:
        /// <br/>  * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=temperature` would select only `temperature` property value (if present)
        /// <br/>      * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=temperature,humidity,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=configuration,status(powerConsumption/watts)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The properties were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FeatureProperties> PropertiesGETAsync(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FeatureProperties>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined query parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no properties or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update all properties of a feature at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all properties to be updated at once.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON object or `null`. We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The properties were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FeatureProperties> PropertiesPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body)
        {
            return PropertiesPUTAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update all properties of a feature at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all properties to be updated at once.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON object or `null`. We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The properties were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FeatureProperties> PropertiesPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FeatureProperties>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The properties were successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature properties to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all properties to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>We strongly recommend to use a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The properties were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body)
        {
            return PropertiesPATCHAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all properties to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).
        /// <br/>We strongly recommend to use a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The properties were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the feature properties to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The properties were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesDELETEAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return PropertiesDELETEAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The properties were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesDELETEAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting the properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no properties or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The property was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesGET2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return PropertiesGET2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The property was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesGET2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified property or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesPUT2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return PropertiesPUT2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesPUT2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For creating/updating a property of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesPATCH2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return PropertiesPATCH2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesPATCH2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For creating/updating a property of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PropertiesDELETE2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return PropertiesDELETE2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The property was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PropertiesDELETE2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/properties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting the properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified property or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the desiredProperties to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the desiredProperties by
        /// <br/>using a comma-separated list:
        /// <br/>  * several desiredProperties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=temperature` would select only `temperature` property value of desiredProperties (if present)
        /// <br/>      * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values of desiredProperties (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property of desiredProperties
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=temperature,humidity,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=configuration,status(powerConsumption/watts)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The desired properties were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FeatureProperties> DesiredPropertiesGETAsync(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return DesiredPropertiesGETAsync(thingId, featureId, fields, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="fields">Contains a comma-separated list of fields from the desiredProperties to be
        /// <br/>included in the returned JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields as defined in the desiredProperties by
        /// <br/>using a comma-separated list:
        /// <br/>  * several desiredProperties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>    For example:
        /// <br/>      * `?fields=temperature` would select only `temperature` property value of desiredProperties (if present)
        /// <br/>      * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values of desiredProperties (if present)
        /// <br/>
        /// <br/>Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        /// <br/>inside parentheses `( )`:
        /// <br/>  * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
        /// <br/>  * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>    For example:
        /// <br/>     * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property of desiredProperties
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=temperature,humidity,location(longitude,latitude)`
        /// <br/>
        /// <br/>* `?fields=configuration,status(powerConsumption/watts)`</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The desired properties were successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FeatureProperties> DesiredPropertiesGETAsync(string thingId, string featureId, string fields, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FeatureProperties>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined query parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 402)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to exceeded data volume or exceeded transaction count.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no desired properties or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update all desired properties of a feature at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all desried properties to be updated at once.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON object or `null`. We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The desired properties were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FeatureProperties> DesiredPropertiesPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body)
        {
            return DesiredPropertiesPUTAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update all desired properties of a feature at once
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all desried properties to be updated at once.
        /// <br/>
        /// <br/>Consider that the value has to be a JSON object or `null`. We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The desired properties were successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FeatureProperties> DesiredPropertiesPUTAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FeatureProperties>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The desired properties were successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the desired feature roperties to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the desired properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all desried properties to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396). We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The desired properties were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body)
        {
            return DesiredPropertiesPATCHAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="body">JSON object of all desried properties to be patched.
        /// <br/>
        /// <br/>Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396). We strongly recommend to use
        /// <br/>a restricted set of characters for the key (identifier).
        /// <br/>
        /// <br/>Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*</param>
        /// <returns>The desired properties were successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesPATCHAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, FeatureProperties body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body of the desired feature roperties to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For modifying the desired properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired properties were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesDELETEAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return DesiredPropertiesDELETEAsync(thingId, featureId, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all desired properties of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired properties were successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesDELETEAsync(string thingId, string featureId, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting the desired properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified feature has no desired properties or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The desired property was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesGET2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy)
        {
            return DesiredPropertiesGET2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, timeout, condition, channel, live_channel_condition, live_channel_timeout_strategy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <param name="live_channel_condition">Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.
        /// <br/>#### Examples
        /// <br/>
        /// <br/>  * ```?live-channel-condition=lt(_modified,"2021-12-24T12:23:42Z")```
        /// <br/>
        /// <br/>  * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```</param>
        /// <param name="live_channel_timeout_strategy">Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.</param>
        /// <returns>The desired property was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesGET2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string timeout, string condition, Channel2? channel, string live_channel_condition, LiveChannelTimeoutStrategy? live_channel_timeout_strategy, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (live_channel_timeout_strategy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("live-channel-timeout-strategy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(live_channel_timeout_strategy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified desired property or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesPUT2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return DesiredPropertiesPUT2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesPUT2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For creating/updating a desired property of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesPATCH2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body)
        {
            return DesiredPropertiesPATCH2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully patched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesPATCH2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * the JSON body is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For creating/updating a desired property of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The thing or the feature with the given ID was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DesiredPropertiesDELETE2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel)
        {
            return DesiredPropertiesDELETE2Async(thingId, featureId, propertyPath, if_Match, if_None_Match, requested_acks, timeout, response_required, condition, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific desired property of a feature
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="propertyPath">The path to the property</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this modifying request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the
        /// <br/>HTTP call until the change was persited to the twin.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="condition">Defines that the request should only be applied to a thing if the given condition is met. The condition can be specified using RQL syntax. 
        /// <br/>#### Examples
        /// <br/>E.g. if the temperature is not 23.9 update it to 23.9:
        /// <br/>* ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```
        /// <br/>
        /// <br/>   `body: 23.9`
        /// <br/>
        /// <br/>Further example conditions:
        /// <br/>* ```?condition=eq(features/temperature/properties/unit,"Celsius")```
        /// <br/>* ```?condition=ge(features/temperature/properties/lastModified,"2021-08-22T19:45:00Z")```
        /// <br/>* ```?condition=gt(_modified,"2021-08-05T12:17:00Z")```
        /// <br/>* ```?condition=exists(features/temperature/properties/value)```
        /// <br/>* ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```
        /// <br/>* ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```</param>
        /// <param name="channel">Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).
        /// <br/>* If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.
        /// <br/>* When using the `live` channel, the command/message is sent towards the device.</param>
        /// <returns>The desired property was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DesiredPropertiesDELETE2Async(string thingId, string featureId, string propertyPath, string if_Match, string if_None_Match, string requested_acks, string timeout, bool? response_required, string condition, Channel2? channel, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (propertyPath == null)
                throw new System.ArgumentNullException("propertyPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/desiredProperties/{propertyPath}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyPath}", System.Uri.EscapeDataString(ConvertToString(propertyPath, System.Globalization.CultureInfo.InvariantCulture)));
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    For deleting the properties of an existing feature, `WRITE` permission is required.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The specified desired property or\nthe thing with the specified `thingId` or the feature with `featureId` was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Initiates claiming a specific thing in order to gain access
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The Claim message was processed successfully and the response body
        /// <br/>contains the custom response. The response body may contain
        /// <br/>arbitrary data chosen by the recipient. The response code defaults
        /// <br/>to `200` but may be chosen by the recipient too.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ClaimAsync(string thingId, int? timeout, string requested_acks, object body)
        {
            return ClaimAsync(thingId, timeout, requested_acks, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initiates claiming a specific thing in order to gain access
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The Claim message was processed successfully and the response body
        /// <br/>contains the custom response. The response body may contain
        /// <br/>arbitrary data chosen by the recipient. The response code defaults
        /// <br/>to `200` but may be chosen by the recipient too.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ClaimAsync(string thingId, int? timeout, string requested_acks, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/inbox/claim?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined path parameters is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The size of the sent message is larger than the accepted limit of 250 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The user has sent too many requests in a given amount of time (\"rate\nlimiting\").", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a message TO a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent but not necessarily received by the thing (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MessagesAsync(string thingId, string messageSubject, int? timeout, string requested_acks, object body)
        {
            return MessagesAsync(thingId, messageSubject, timeout, requested_acks, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a message TO a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent but not necessarily received by the thing (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MessagesAsync(string thingId, string messageSubject, int? timeout, string requested_acks, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (messageSubject == null)
                throw new System.ArgumentNullException("messageSubject");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/inbox/messages/{messageSubject}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageSubject}", System.Uri.EscapeDataString(ConvertToString(messageSubject, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined path parameters is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the resource `message:/inbox/messages/{messageSubject}`.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to interact with the messages of referenced thing.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The size of the sent message is larger than the accepted limit of 250 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a message FROM a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Messages2Async(string thingId, string messageSubject, int? timeout, string requested_acks, object body)
        {
            return Messages2Async(thingId, messageSubject, timeout, requested_acks, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a message FROM a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Messages2Async(string thingId, string messageSubject, int? timeout, string requested_acks, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (messageSubject == null)
                throw new System.ArgumentNullException("messageSubject");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/outbox/messages/{messageSubject}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageSubject}", System.Uri.EscapeDataString(ConvertToString(messageSubject, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined path parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the resource `message:/outbox/messages/{messageSubject}`.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to interact with the messages of referenced thing.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The size of the sent message is larger than the accepted limit of 250 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a message TO a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent but not necessarily received by the feature
        /// <br/>(fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Messages3Async(string thingId, string featureId, string messageSubject, int? timeout, string requested_acks, object body)
        {
            return Messages3Async(thingId, featureId, messageSubject, timeout, requested_acks, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a message TO a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent but not necessarily received by the feature
        /// <br/>(fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Messages3Async(string thingId, string featureId, string messageSubject, int? timeout, string requested_acks, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (messageSubject == null)
                throw new System.ArgumentNullException("messageSubject");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/inbox/messages/{messageSubject}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageSubject}", System.Uri.EscapeDataString(ConvertToString(messageSubject, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined path parameters is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n * the caller has insufficient permissions.\n   You need `WRITE` permission on the resource `message:/features/{featureId}/inbox/messages/{messageSubject}`.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to interact with the messages of referenced thing.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The size of the sent message is larger than the accepted limit of 250 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a message FROM a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Messages4Async(string thingId, string featureId, string messageSubject, int? timeout, string requested_acks, object body)
        {
            return Messages4Async(thingId, featureId, messageSubject, timeout, requested_acks, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a message FROM a specific feature of a specific thing
        /// </summary>
        /// <param name="thingId">The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).</param>
        /// <param name="featureId">The ID of the feature - has to conform to RFC-3986 (URI)</param>
        /// <param name="messageSubject">The subject of the Message - has to conform to RFC-3986 (URI)</param>
        /// <param name="timeout">Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        /// <br/>HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        /// <br/>fire and forget semantics for the message.</param>
        /// <param name="requested_acks">Contains the "requested acknowledgements" for this request as comma separated list. The HTTP call will
        /// <br/>block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`
        /// <br/>parameter.
        /// <br/>
        /// <br/>The default (if omitted) requested acks is `requested-acks=live-response` which will block the
        /// <br/>HTTP call until a subscriber of the live message sends a response.</param>
        /// <returns>The message was sent (fire and forget).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Messages4Async(string thingId, string featureId, string messageSubject, int? timeout, string requested_acks, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (thingId == null)
                throw new System.ArgumentNullException("thingId");

            if (featureId == null)
                throw new System.ArgumentNullException("featureId");

            if (messageSubject == null)
                throw new System.ArgumentNullException("messageSubject");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/things/{thingId}/features/{featureId}/outbox/messages/{messageSubject}?");
            urlBuilder_.Replace("{thingId}", System.Uri.EscapeDataString(ConvertToString(thingId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageSubject}", System.Uri.EscapeDataString(ConvertToString(messageSubject, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requested_acks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requested-acks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requested_acks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n  * at least one of the defined path parameters is valid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the resource `message:/features/{featureId}/outbox/messages/{messageSubject}`.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to interact with the messages of referenced thing.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The size of the sent message is larger than the accepted limit of 250 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 424)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("One or more acknowledgement requests in the parameter `requested-acks`\nwere not fulfilled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `policyId`
        /// <br/>* `entries`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several entry paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=entries/ditto` would select only the `ditto` entry value(if present)
        /// <br/>        * `?fields=entries/ditto,entries/user` would select only `ditto` and
        /// <br/>           `user` entry values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=entries(ditto,user)` would select only `ditto`
        /// <br/>          and `user` entry values (if present)
        /// <br/>       * `?fields=entries(ditto/subjects)` would select the `subjects` value
        /// <br/>          inside the `ditto` entry
        /// <br/>       * `?fields=entries/ditto/subjects(issuer:google,issuer:azure)` would select the `issuer:google` and
        /// <br/>          `issuer:azure` values inside the `subjects` object inside the `entries` object
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `policyId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the policy. The revision is a counter, which is incremented on each modification of a policy.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the policy in ISO-8601 UTC format. The timestamp is set on creation of a policy.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the policy in ISO-8601 UTC format. The timestamp is set on each modification of a policy.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the policy. The content is a JSON object having the policy's JSON structure with the difference that the JSON leaves of the policy are JSON objects containing the metadata.
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=policyId,entries,_revision`
        /// <br/>* `?fields=entries(ditto,user),_namespace`</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>policy.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Policy> PoliciesGETAsync(string policyId, string fields, string if_Match, string if_None_Match, string timeout)
        {
            return PoliciesGETAsync(policyId, fields, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `policyId`
        /// <br/>* `entries`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several entry paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=entries/ditto` would select only the `ditto` entry value(if present)
        /// <br/>        * `?fields=entries/ditto,entries/user` would select only `ditto` and
        /// <br/>           `user` entry values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=entries(ditto,user)` would select only `ditto`
        /// <br/>          and `user` entry values (if present)
        /// <br/>       * `?fields=entries(ditto/subjects)` would select the `subjects` value
        /// <br/>          inside the `ditto` entry
        /// <br/>       * `?fields=entries/ditto/subjects(issuer:google,issuer:azure)` would select the `issuer:google` and
        /// <br/>          `issuer:azure` values inside the `subjects` object inside the `entries` object
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `policyId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the policy. The revision is a counter, which is incremented on each modification of a policy.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the policy in ISO-8601 UTC format. The timestamp is set on creation of a policy.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the policy in ISO-8601 UTC format. The timestamp is set on each modification of a policy.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the policy. The content is a JSON object having the policy's JSON structure with the difference that the JSON leaves of the policy are JSON objects containing the metadata.
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=policyId,entries,_revision`
        /// <br/>* `?fields=entries(ditto,user),_namespace`</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>policy.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Policy> PoliciesGETAsync(string policyId, string fields, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Policy>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a policy with a specified ID
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="allow_policy_lockout">Defines whether a subject is allowed to create a policy without having WRITE permission on the policy
        /// <br/>resource of the created policy.
        /// <br/>
        /// <br/>The default (if ommited) is `false`.</param>
        /// <param name="body">JSON representation of the policy.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The policy was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewPolicy> PoliciesPUTAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required, bool? allow_policy_lockout, NewPolicy body)
        {
            return PoliciesPUTAsync(policyId, if_Match, if_None_Match, timeout, response_required, allow_policy_lockout, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a policy with a specified ID
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="allow_policy_lockout">Defines whether a subject is allowed to create a policy without having WRITE permission on the policy
        /// <br/>resource of the created policy.
        /// <br/>
        /// <br/>The default (if ommited) is `false`.</param>
        /// <param name="body">JSON representation of the policy.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The policy was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewPolicy> PoliciesPUTAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required, bool? allow_policy_lockout, NewPolicy body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (allow_policy_lockout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allow-policy-lockout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allow_policy_lockout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewPolicy>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The policy was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON body of the policy to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the root `policy:/` resource,\n    without any revoke in a deeper path of the policy resource.\n    (You can omit this check by setting the `allow-policy-lockout` parameter.)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The policy was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PoliciesDELETEAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required)
        {
            return PoliciesDELETEAsync(policyId, if_Match, if_None_Match, timeout, response_required, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The policy was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PoliciesDELETEAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the root `policy:/` resource,\n    without any revoke in a deeper path of the policy resource.having any revoke.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Activate subjects for this policy derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <returns>The request was successful. Subjects were injected into authorized policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ActivateTokenIntegrationAsync(string policyId, object body)
        {
            return ActivateTokenIntegrationAsync(policyId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate subjects for this policy derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <returns>The request was successful. Subjects were injected into authorized policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ActivateTokenIntegrationAsync(string policyId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/actions/activateTokenIntegration");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authentication was not performed with a JWT.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on any\nentries of the policy.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because no policy entry matched the following conditions:\n* containing a a subject ID matching the JWT\'s authenticated subject\n* containing a `READ` permission granted to a `thing:/` resource path", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deactivate subjects for this policy derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <returns>The request was successful. Subjects were removed from authorized policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeactivateTokenIntegrationAsync(string policyId)
        {
            return DeactivateTokenIntegrationAsync(policyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate subjects for this policy derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <returns>The request was successful. Subjects were removed from authorized policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeactivateTokenIntegrationAsync(string policyId, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/actions/deactivateTokenIntegration");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authentication was not performed with a JWT.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on any\nentries of the policy.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because no policy entry matched the following conditions:\n* containing a a subject ID matching the JWT\'s authenticated subject", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the entries of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned are the
        /// <br/>policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PolicyEntries> EntriesGETAsync(string policyId, string if_Match, string if_None_Match, string timeout)
        {
            return EntriesGETAsync(policyId, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the entries of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned are the
        /// <br/>policy entries.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyEntries> EntriesGETAsync(string policyId, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyEntries>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify the entries of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the policy entries.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The policy entries were successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EntriesPUTAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required, PolicyEntries body)
        {
            return EntriesPUTAsync(policyId, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify the entries of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the policy entries.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The policy entries were successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EntriesPUTAsync(string policyId, string if_Match, string if_None_Match, string timeout, bool? response_required, PolicyEntries body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON body of the policy to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n* the caller has insufficient permissions.\n  You need `WRITE` permission on the `policy:/entries` resource,\n  without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>policy entry.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PolicyEntry> EntriesGET2Async(string policyId, string label, string if_Match, string if_None_Match, string timeout)
        {
            return EntriesGET2Async(policyId, label, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>policy entry.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyEntry> EntriesGET2Async(string policyId, string label, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the policy entry.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.
        /// <br/>### Example
        /// <br/>Given your policy "com.acme.coffeemaker:policy-01" only has the
        /// <br/>DEFAULT entry, and you want to add a "Consumer" section which additionally allows USER-01
        /// <br/>(managed within a Nginx reverse proxy) to
        /// <br/>*read* the thing and to trigger a "makeCoffee" operation (i.e. POST such a message - see
        /// <br/>POST /things/{thingId}/inbox/messages/{messageSubject}).
        /// <br/>Set the label value to **Consumer** and the following request body:
        /// <br/>```
        /// <br/>{
        /// <br/>  "subjects": {
        /// <br/>    "nginx:USER-01": {
        /// <br/>      "type": "pre authenticated user from nginx"
        /// <br/>    }
        /// <br/>  },
        /// <br/>  "resources": {
        /// <br/>    "thing:/": {
        /// <br/>      "grant": [
        /// <br/>        "READ"
        /// <br/>      ],
        /// <br/>      "revoke": []
        /// <br/>    },
        /// <br/>    "message:/": {
        /// <br/>      "grant": [
        /// <br/>        "WRITE"
        /// <br/>      ],
        /// <br/>      "revoke": []
        /// <br/>    }
        /// <br/>  }
        /// <br/>}
        /// <br/>```</param>
        /// <returns>The policy entry was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PolicyEntry> EntriesPUT2Async(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, PolicyEntry body)
        {
            return EntriesPUT2Async(policyId, label, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the policy entry.
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.
        /// <br/>### Example
        /// <br/>Given your policy "com.acme.coffeemaker:policy-01" only has the
        /// <br/>DEFAULT entry, and you want to add a "Consumer" section which additionally allows USER-01
        /// <br/>(managed within a Nginx reverse proxy) to
        /// <br/>*read* the thing and to trigger a "makeCoffee" operation (i.e. POST such a message - see
        /// <br/>POST /things/{thingId}/inbox/messages/{messageSubject}).
        /// <br/>Set the label value to **Consumer** and the following request body:
        /// <br/>```
        /// <br/>{
        /// <br/>  "subjects": {
        /// <br/>    "nginx:USER-01": {
        /// <br/>      "type": "pre authenticated user from nginx"
        /// <br/>    }
        /// <br/>  },
        /// <br/>  "resources": {
        /// <br/>    "thing:/": {
        /// <br/>      "grant": [
        /// <br/>        "READ"
        /// <br/>      ],
        /// <br/>      "revoke": []
        /// <br/>    },
        /// <br/>    "message:/": {
        /// <br/>      "grant": [
        /// <br/>        "WRITE"
        /// <br/>      ],
        /// <br/>      "revoke": []
        /// <br/>    }
        /// <br/>  }
        /// <br/>}
        /// <br/>```</param>
        /// <returns>The policy entry was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyEntry> EntriesPUT2Async(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, PolicyEntry body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The policy entry was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n* the JSON body of the policy entry to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the `policy:/entries/{label}` resource,\n    without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The policy entry was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EntriesDELETEAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required)
        {
            return EntriesDELETEAsync(policyId, label, if_Match, if_None_Match, timeout, response_required, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the entries of a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The policy entry was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EntriesDELETEAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n * the caller has insufficient permissions.\n   You need `WRITE` permission on the `policy:/entries/{label}` resource,\n   without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Activate a subject for this policy entry derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <returns>The request was successful. The subject was injected.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ActivateTokenIntegration2Async(string policyId, string label, object body)
        {
            return ActivateTokenIntegration2Async(policyId, label, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate a subject for this policy entry derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <returns>The request was successful. The subject was injected.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ActivateTokenIntegration2Async(string policyId, string label, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/actions/activateTokenIntegration");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authentication was not performed with a JWT.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on this\npolicy entry.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because this policy entry did not match the following conditions:\n* containing a a subject ID matching the JWT\'s authenticated subject\n* containing a `READ` permission granted to a `thing:/` resource path", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deactivate a subject for this policy entry derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <returns>The request was successful. The subject was removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeactivateTokenIntegration2Async(string policyId, string label)
        {
            return DeactivateTokenIntegration2Async(policyId, label, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate a subject for this policy entry derived from the token
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <returns>The request was successful. The subject was removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeactivateTokenIntegration2Async(string policyId, string label, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/actions/deactivateTokenIntegration");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the authentication was not performed with a JWT.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because the user did not have the `EXECUTE` permission on this policy entry.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request could not be completed because this policy entry did not match the following conditions:\n* containing a a subject ID matching the JWT\'s authenticated subject", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all Subjects for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned. The subjects are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Subjects> SubjectsGETAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout)
        {
            return SubjectsGETAsync(policyId, label, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all Subjects for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned. The subjects are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Subjects> SubjectsGETAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/subjects?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Subjects>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n   * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify all Subjects for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Subjects.
        /// <br/>
        /// <br/>
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The Subjects were successfully created or updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SubjectsPUTAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, Subjects body)
        {
            return SubjectsPUTAsync(policyId, label, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify all Subjects for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Subjects.
        /// <br/>
        /// <br/>
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the
        /// <br/>backend insert the authenticated subjectId of the HTTP request.</param>
        /// <returns>The Subjects were successfully created or updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SubjectsPUTAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, Subjects body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/subjects?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n   * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n * the JSON body of the policy subjects to be created/modified is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n* the caller has insufficient permissions.\n  You need `WRITE` permission on the `policy:/entries/{label}/subjects` resource,\n  without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID was\nnot found in the context of the authenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>Subject.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubjectEntry> SubjectsGET2Async(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout)
        {
            return SubjectsGET2Async(policyId, label, subjectId, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>Subject.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubjectEntry> SubjectsGET2Async(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (subjectId == null)
                throw new System.ArgumentNullException("subjectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/subjects/{subjectId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subjectId}", System.Uri.EscapeDataString(ConvertToString(subjectId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubjectEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID,\nthe policy entry or the Subject was not found in the context of the\nauthenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Subject</param>
        /// <returns>The Subject was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubjectEntry> SubjectsPUT2Async(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout, bool? response_required, SubjectEntry body)
        {
            return SubjectsPUT2Async(policyId, label, subjectId, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Subject</param>
        /// <returns>The Subject was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubjectEntry> SubjectsPUT2Async(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout, bool? response_required, SubjectEntry body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (subjectId == null)
                throw new System.ArgumentNullException("subjectId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/subjects/{subjectId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subjectId}", System.Uri.EscapeDataString(ConvertToString(subjectId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubjectEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Subject was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)))\n* the JSON body of the policy subject to be created/modified is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n* the caller has insufficient permissions.\n  You need `WRITE` permission on the root `policy:/entries/{label}/subjects/{subjectId}` resource,\n  without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The Subject was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SubjectsDELETEAsync(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout, bool? response_required)
        {
            return SubjectsDELETEAsync(policyId, label, subjectId, if_Match, if_None_Match, timeout, response_required, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete one specific Subject for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="subjectId">The ID of an (Authorization) Subject</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The Subject was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SubjectsDELETEAsync(string policyId, string label, string subjectId, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (subjectId == null)
                throw new System.ArgumentNullException("subjectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/subjects/{subjectId}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subjectId}", System.Uri.EscapeDataString(ConvertToString(subjectId, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n* the caller has insufficient permissions.\n  You need `WRITE` permission on the root `policy:/entries/{label}/subjects/{subjectId}` resource,\n  without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID,\nthe policy entry or the Subject was not found in the context of the\nauthenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all Resources for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned. The resources are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, ResourceEntry>> ResourcesGETAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout)
        {
            return ResourcesGETAsync(policyId, label, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all Resources for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned. The resources are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, ResourceEntry>> ResourcesGETAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/resources?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, ResourceEntry>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify all Resources for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Resources</param>
        /// <returns>The Resources were successfully created or updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResourcesPUTAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Collections.Generic.IDictionary<string, ResourceEntry> body)
        {
            return ResourcesPUTAsync(policyId, label, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify all Resources for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Resources</param>
        /// <returns>The Resources were successfully created or updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResourcesPUTAsync(string policyId, string label, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Collections.Generic.IDictionary<string, ResourceEntry> body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/resources?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON is invalid, or no valid Resources JSON object.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n* the caller has insufficient permissions.\n  You need `WRITE` permission on the root `policy:/entries/{label}/resources` resource,\n  without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>Resource.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceEntry> ResourcesGET2Async(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout)
        {
            return ResourcesGET2Async(policyId, label, resourcePath, if_Match, if_None_Match, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>The request successfully returned completed and returned is the
        /// <br/>Resource.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceEntry> ResourcesGET2Async(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (resourcePath == null)
                throw new System.ArgumentNullException("resourcePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/resources/{resourcePath}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resourcePath}", System.Uri.EscapeDataString(ConvertToString(resourcePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID,\nthe policy entry or the Resource was not found in the context of the\nauthenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or modify one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Resource</param>
        /// <returns>The Resource was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResourceEntry> ResourcesPUT2Async(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout, bool? response_required, ResourceEntry body)
        {
            return ResourcesPUT2Async(policyId, label, resourcePath, if_Match, if_None_Match, timeout, response_required, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or modify one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <param name="body">JSON representation of the Resource</param>
        /// <returns>The Resource was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceEntry> ResourcesPUT2Async(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout, bool? response_required, ResourceEntry body, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (resourcePath == null)
                throw new System.ArgumentNullException("resourcePath");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/resources/{resourcePath}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resourcePath}", System.Uri.EscapeDataString(ConvertToString(resourcePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Resource was successfully updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n matches the current ETag of the (sub-)resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n  * the JSON is invalid, or no valid Resource JSON object.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the `policy:/entries/{label}/resources/{resourcePath}` resource,\n    without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID or\nthe policy entry was not found in the context of the authenticated\nuser.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The created or modified entity is larger than the accepted limit of 100 kB.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The Resource was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResourcesDELETEAsync(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout, bool? response_required)
        {
            return ResourcesDELETEAsync(policyId, label, resourcePath, if_Match, if_None_Match, timeout, response_required, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete one specific Resource for a specific Label of a specific policy
        /// </summary>
        /// <param name="policyId">The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).
        /// <br/>
        /// <br/>The namespace needs to:
        /// <br/>* conform to the reverse domain name notation</param>
        /// <param name="label">The label of a policy entry</param>
        /// <param name="resourcePath">The path of an (Authorization) Resource</param>
        /// <param name="if_Match">The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
        /// <br/>  * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: "hash:a75ece4e"`
        /// <br/>  * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`</param>
        /// <param name="if_None_Match">The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="response_required">Defines whether a response is required to the API call or not - if set to `false` the response will directly
        /// <br/>sent back with a status code of `202` (Accepted).
        /// <br/>
        /// <br/>The default (if ommited) response is `true`.</param>
        /// <returns>The Resource was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResourcesDELETEAsync(string policyId, string label, string resourcePath, string if_Match, string if_None_Match, string timeout, bool? response_required, System.Threading.CancellationToken cancellationToken)
        {
            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (label == null)
                throw new System.ArgumentNullException("label");

            if (resourcePath == null)
                throw new System.ArgumentNullException("resourcePath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/policies/{policyId}/entries/{label}/resources/{resourcePath}?");
            urlBuilder_.Replace("{policyId}", System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{label}", System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resourcePath}", System.Uri.EscapeDataString(ConvertToString(resourcePath, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_required != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response-required") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_required, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n\n  * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.\n    You need `WRITE` permission on the `policy:/entries/{label}/resources/{resourcePath}` resource,\n    without any revoke in a deeper path of the policy resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. The policy with the given ID,\nthe policy entry or the Resource was not found in the context of the\nauthenticated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\nspecified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\nthe (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\nfailing If-None-Match header for a read request, status 304 will be returned instead.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve information about the current caller
        /// </summary>
        /// <returns>The request successfully returned information about the caller.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WhoAmI> WhoamiAsync()
        {
            return WhoamiAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve information about the current caller
        /// </summary>
        /// <returns>The request successfully returned information about the caller.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WhoAmI> WhoamiAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/whoami");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WhoAmI>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for things
        /// </summary>
        /// <param name="filter">#### Filter predicates:
        /// <br/>
        /// <br/>* ```eq({property},{value})```  (i.e. equal to the given value)
        /// <br/>
        /// <br/>* ```ne({property},{value})```  (i.e. not equal to the given value)
        /// <br/>
        /// <br/>* ```gt({property},{value})```  (i.e. greater than the given value)
        /// <br/>
        /// <br/>* ```ge({property},{value})```  (i.e. equal to the given value or greater than it)
        /// <br/>
        /// <br/>* ```lt({property},{value})```  (i.e. lower than the given value or equal to it)
        /// <br/>
        /// <br/>* ```le({property},{value})```  (i.e. lower than the given value)
        /// <br/>
        /// <br/>* ```in({property},{value},{value},...)```  (i.e. contains at least one of the values listed)
        /// <br/>
        /// <br/>* ```like({property},{value})```  (i.e. contains values similar to the expressions listed)
        /// <br/>
        /// <br/>* ```exists({property})```  (i.e. all things in which the given path exists)
        /// <br/>
        /// <br/>
        /// <br/>Note: When using filter operations, only things with the specified properties are returned.
        /// <br/>For example, the filter `ne(attributes/owner, "SID123")` will only return things that do have
        /// <br/>the `owner` attribute.
        /// <br/>
        /// <br/>
        /// <br/>#### Logical operations:
        /// <br/>
        /// <br/>
        /// <br/>* ```and({query},{query},...)```
        /// <br/>
        /// <br/>* ```or({query},{query},...)```
        /// <br/>
        /// <br/>* ```not({query})```
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```eq(attributes/location,"kitchen")```
        /// <br/>
        /// <br/>* ```ge(thingId,"myThing1")```
        /// <br/>
        /// <br/>* ```gt(_created,"2020-08-05T12:17")```
        /// <br/>
        /// <br/>* ```exists(features/featureId)```
        /// <br/>
        /// <br/>* ```and(eq(attributes/location,"kitchen"),eq(attributes/color,"red"))```
        /// <br/>
        /// <br/>* ```or(eq(attributes/location,"kitchen"),eq(attributes/location,"living-room"))```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"known-chars-at-start*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-at-end")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-in-between*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"just-som?-char?-unkn?wn")```
        /// <br/>
        /// <br/>The `like` filters with the wildcard `*` at the beginning can slow down your search request.</param>
        /// <param name="namespaces">A comma-separated list of namespaces. This list is used to limit the query to things in the given namespaces
        /// <br/>only.
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace`
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace1,com.example.namespace2`</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="option">Possible values for the parameter:
        /// <br/>
        /// <br/>#### Sort operations
        /// <br/>
        /// <br/>* ```sort([+|-]{property})```
        /// <br/>* ```sort([+|-]{property},[+|-]{property},...)```
        /// <br/>
        /// <br/>#### Paging operations
        /// <br/>
        /// <br/>* ```size({page-size})```  Maximum allowed page size is `200`. Default page size is `25`.
        /// <br/>* ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without
        /// <br/>quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of
        /// <br/>the previous search. The meaning of cursor IDs is unspecified and may change without notice.
        /// <br/>
        /// <br/>The paging option `limit({offset},{count})` is deprecated.
        /// <br/>It may result in slow queries or timeouts and will be removed eventually.
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```sort(+thingId)```
        /// <br/>* ```sort(-attributes/manufacturer)```
        /// <br/>* ```sort(+thingId,-attributes/manufacturer)```
        /// <br/>* ```size(10)``` return 10 results
        /// <br/>* ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.
        /// <br/>
        /// <br/>#### Combine:
        /// <br/>
        /// <br/>If you need to specify multiple options, when using the swagger UI just write each option in a new line.
        /// <br/>When using the plain REST API programmatically,
        /// <br/>you will need to separate the options using a comma (,) character.
        /// <br/>
        /// <br/>```size(200),cursor(LOREMIPSUM)```
        /// <br/>
        /// <br/>The deprecated paging option `limit` may not be combined with the other paging options `size` and `cursor`.</param>
        /// <returns>An array of the matching things.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SearchResultThings> ThingsGET2Async(string filter, string namespaces, string fields, string timeout, string option)
        {
            return ThingsGET2Async(filter, namespaces, fields, timeout, option, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for things
        /// </summary>
        /// <param name="filter">#### Filter predicates:
        /// <br/>
        /// <br/>* ```eq({property},{value})```  (i.e. equal to the given value)
        /// <br/>
        /// <br/>* ```ne({property},{value})```  (i.e. not equal to the given value)
        /// <br/>
        /// <br/>* ```gt({property},{value})```  (i.e. greater than the given value)
        /// <br/>
        /// <br/>* ```ge({property},{value})```  (i.e. equal to the given value or greater than it)
        /// <br/>
        /// <br/>* ```lt({property},{value})```  (i.e. lower than the given value or equal to it)
        /// <br/>
        /// <br/>* ```le({property},{value})```  (i.e. lower than the given value)
        /// <br/>
        /// <br/>* ```in({property},{value},{value},...)```  (i.e. contains at least one of the values listed)
        /// <br/>
        /// <br/>* ```like({property},{value})```  (i.e. contains values similar to the expressions listed)
        /// <br/>
        /// <br/>* ```exists({property})```  (i.e. all things in which the given path exists)
        /// <br/>
        /// <br/>
        /// <br/>Note: When using filter operations, only things with the specified properties are returned.
        /// <br/>For example, the filter `ne(attributes/owner, "SID123")` will only return things that do have
        /// <br/>the `owner` attribute.
        /// <br/>
        /// <br/>
        /// <br/>#### Logical operations:
        /// <br/>
        /// <br/>
        /// <br/>* ```and({query},{query},...)```
        /// <br/>
        /// <br/>* ```or({query},{query},...)```
        /// <br/>
        /// <br/>* ```not({query})```
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```eq(attributes/location,"kitchen")```
        /// <br/>
        /// <br/>* ```ge(thingId,"myThing1")```
        /// <br/>
        /// <br/>* ```gt(_created,"2020-08-05T12:17")```
        /// <br/>
        /// <br/>* ```exists(features/featureId)```
        /// <br/>
        /// <br/>* ```and(eq(attributes/location,"kitchen"),eq(attributes/color,"red"))```
        /// <br/>
        /// <br/>* ```or(eq(attributes/location,"kitchen"),eq(attributes/location,"living-room"))```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"known-chars-at-start*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-at-end")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-in-between*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"just-som?-char?-unkn?wn")```
        /// <br/>
        /// <br/>The `like` filters with the wildcard `*` at the beginning can slow down your search request.</param>
        /// <param name="namespaces">A comma-separated list of namespaces. This list is used to limit the query to things in the given namespaces
        /// <br/>only.
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace`
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace1,com.example.namespace2`</param>
        /// <param name="fields">Contains a comma-separated list of fields to be included in the returned
        /// <br/>JSON. attributes can be selected in the same manner.
        /// <br/>
        /// <br/>#### Selectable fields
        /// <br/>
        /// <br/>* `thingId`
        /// <br/>* `policyId`
        /// <br/>* `definition`
        /// <br/>* `attributes`
        /// <br/>
        /// <br/>   Supports selecting arbitrary sub-fields by using a comma-separated list:
        /// <br/>    * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)
        /// <br/>
        /// <br/>      For example:
        /// <br/>        * `?fields=attributes/model` would select only `model` attribute value (if present)
        /// <br/>        * `?fields=attributes/model,attributes/location` would select only `model` and
        /// <br/>           `location` attribute values (if present)
        /// <br/>
        /// <br/>  Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
        /// <br/>    * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
        /// <br/>      separated with `/`) to select
        /// <br/>
        /// <br/>    * sub-selectors can be used to request only specific sub-fields by placing expressions
        /// <br/>      in parentheses `( )` after a selected subfield
        /// <br/>
        /// <br/>      For example:
        /// <br/>       * `?fields=attributes(model,location)` would select only `model`
        /// <br/>          and `location` attribute values (if present)
        /// <br/>       * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value
        /// <br/>          inside the `coffeemaker` object
        /// <br/>       * `?fields=attributes/address/postal(city,street)` would select the `city` and
        /// <br/>          `street` values inside the `postal` object inside the `address` object
        /// <br/>
        /// <br/>* `features`
        /// <br/>
        /// <br/>  Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)
        /// <br/>
        /// <br/>* `_namespace`
        /// <br/>
        /// <br/>  Specifically selects the namespace also contained in the `thingId`
        /// <br/>
        /// <br/>* `_revision`
        /// <br/>
        /// <br/>  Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.
        /// <br/>
        /// <br/>* `_created`
        /// <br/>
        /// <br/>  Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.
        /// <br/>
        /// <br/>* `_modified`
        /// <br/>
        /// <br/>  Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.
        /// <br/>
        /// <br/>* `_metadata`
        /// <br/>
        /// <br/>  Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.
        /// <br/>
        /// <br/>* `_policy`
        /// <br/>
        /// <br/>  Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)
        /// <br/>
        /// <br/>#### Examples
        /// <br/>
        /// <br/>* `?fields=thingId,attributes,features`
        /// <br/>* `?fields=attributes(model,manufacturer),features`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <param name="option">Possible values for the parameter:
        /// <br/>
        /// <br/>#### Sort operations
        /// <br/>
        /// <br/>* ```sort([+|-]{property})```
        /// <br/>* ```sort([+|-]{property},[+|-]{property},...)```
        /// <br/>
        /// <br/>#### Paging operations
        /// <br/>
        /// <br/>* ```size({page-size})```  Maximum allowed page size is `200`. Default page size is `25`.
        /// <br/>* ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without
        /// <br/>quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of
        /// <br/>the previous search. The meaning of cursor IDs is unspecified and may change without notice.
        /// <br/>
        /// <br/>The paging option `limit({offset},{count})` is deprecated.
        /// <br/>It may result in slow queries or timeouts and will be removed eventually.
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```sort(+thingId)```
        /// <br/>* ```sort(-attributes/manufacturer)```
        /// <br/>* ```sort(+thingId,-attributes/manufacturer)```
        /// <br/>* ```size(10)``` return 10 results
        /// <br/>* ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.
        /// <br/>
        /// <br/>#### Combine:
        /// <br/>
        /// <br/>If you need to specify multiple options, when using the swagger UI just write each option in a new line.
        /// <br/>When using the plain REST API programmatically,
        /// <br/>you will need to separate the options using a comma (,) character.
        /// <br/>
        /// <br/>```size(200),cursor(LOREMIPSUM)```
        /// <br/>
        /// <br/>The deprecated paging option `limit` may not be combined with the other paging options `size` and `cursor`.</param>
        /// <returns>An array of the matching things.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchResultThings> ThingsGET2Async(string filter, string namespaces, string fields, string timeout, string option, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search/things?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (namespaces != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("namespaces") + "=").Append(System.Uri.EscapeDataString(ConvertToString(namespaces, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (option != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("option") + "=").Append(System.Uri.EscapeDataString(ConvertToString(option, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResultThings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. A provided parameter is in a\nwrong format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to an invalid authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request ran out of time to execute on the the back-end. Optimize your query and try again.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Count things
        /// </summary>
        /// <param name="filter">#### Filter predicates:
        /// <br/>
        /// <br/>* ```eq({property},{value})```  (i.e. equal to the given value)
        /// <br/>
        /// <br/>* ```ne({property},{value})```  (i.e. not equal to the given value)
        /// <br/>
        /// <br/>* ```gt({property},{value})```  (i.e. greater than the given value)
        /// <br/>
        /// <br/>* ```ge({property},{value})```  (i.e. equal to the given value or greater than it)
        /// <br/>
        /// <br/>* ```lt({property},{value})```  (i.e. lower than the given value or equal to it)
        /// <br/>
        /// <br/>* ```le({property},{value})```  (i.e. lower than the given value)
        /// <br/>
        /// <br/>* ```in({property},{value},{value},...)```  (i.e. contains at least one of the values listed)
        /// <br/>
        /// <br/>* ```like({property},{value})```  (i.e. contains values similar to the expressions listed)
        /// <br/>
        /// <br/>* ```exists({property})```  (i.e. all things in which the given path exists)
        /// <br/>
        /// <br/>
        /// <br/>Note: When using filter operations, only things with the specified properties are returned.
        /// <br/>For example, the filter `ne(attributes/owner, "SID123")` will only return things that do have
        /// <br/>the `owner` attribute.
        /// <br/>
        /// <br/>
        /// <br/>#### Logical operations:
        /// <br/>
        /// <br/>
        /// <br/>* ```and({query},{query},...)```
        /// <br/>
        /// <br/>* ```or({query},{query},...)```
        /// <br/>
        /// <br/>* ```not({query})```
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```eq(attributes/location,"kitchen")```
        /// <br/>
        /// <br/>* ```ge(thingId,"myThing1")```
        /// <br/>
        /// <br/>* ```gt(_created,"2020-08-05T12:17")```
        /// <br/>
        /// <br/>* ```exists(features/featureId)```
        /// <br/>
        /// <br/>* ```and(eq(attributes/location,"kitchen"),eq(attributes/color,"red"))```
        /// <br/>
        /// <br/>* ```or(eq(attributes/location,"kitchen"),eq(attributes/location,"living-room"))```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"known-chars-at-start*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-at-end")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-in-between*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"just-som?-char?-unkn?wn")```
        /// <br/>
        /// <br/>The `like` filters with the wildcard `*` at the beginning can slow down your search request.</param>
        /// <param name="namespaces">A comma-separated list of namespaces. This list is used to limit the query to things in the given namespaces
        /// <br/>only.
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace`
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace1,com.example.namespace2`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>A number indicating the amount of matched things</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> CountAsync(string filter, string namespaces, string timeout)
        {
            return CountAsync(filter, namespaces, timeout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Count things
        /// </summary>
        /// <param name="filter">#### Filter predicates:
        /// <br/>
        /// <br/>* ```eq({property},{value})```  (i.e. equal to the given value)
        /// <br/>
        /// <br/>* ```ne({property},{value})```  (i.e. not equal to the given value)
        /// <br/>
        /// <br/>* ```gt({property},{value})```  (i.e. greater than the given value)
        /// <br/>
        /// <br/>* ```ge({property},{value})```  (i.e. equal to the given value or greater than it)
        /// <br/>
        /// <br/>* ```lt({property},{value})```  (i.e. lower than the given value or equal to it)
        /// <br/>
        /// <br/>* ```le({property},{value})```  (i.e. lower than the given value)
        /// <br/>
        /// <br/>* ```in({property},{value},{value},...)```  (i.e. contains at least one of the values listed)
        /// <br/>
        /// <br/>* ```like({property},{value})```  (i.e. contains values similar to the expressions listed)
        /// <br/>
        /// <br/>* ```exists({property})```  (i.e. all things in which the given path exists)
        /// <br/>
        /// <br/>
        /// <br/>Note: When using filter operations, only things with the specified properties are returned.
        /// <br/>For example, the filter `ne(attributes/owner, "SID123")` will only return things that do have
        /// <br/>the `owner` attribute.
        /// <br/>
        /// <br/>
        /// <br/>#### Logical operations:
        /// <br/>
        /// <br/>
        /// <br/>* ```and({query},{query},...)```
        /// <br/>
        /// <br/>* ```or({query},{query},...)```
        /// <br/>
        /// <br/>* ```not({query})```
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* ```eq(attributes/location,"kitchen")```
        /// <br/>
        /// <br/>* ```ge(thingId,"myThing1")```
        /// <br/>
        /// <br/>* ```gt(_created,"2020-08-05T12:17")```
        /// <br/>
        /// <br/>* ```exists(features/featureId)```
        /// <br/>
        /// <br/>* ```and(eq(attributes/location,"kitchen"),eq(attributes/color,"red"))```
        /// <br/>
        /// <br/>* ```or(eq(attributes/location,"kitchen"),eq(attributes/location,"living-room"))```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"known-chars-at-start*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-at-end")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"*known-chars-in-between*")```
        /// <br/>
        /// <br/>* ```like(attributes/key1,"just-som?-char?-unkn?wn")```
        /// <br/>
        /// <br/>The `like` filters with the wildcard `*` at the beginning can slow down your search request.</param>
        /// <param name="namespaces">A comma-separated list of namespaces. This list is used to limit the query to things in the given namespaces
        /// <br/>only.
        /// <br/>
        /// <br/>
        /// <br/>#### Examples:
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace`
        /// <br/>
        /// <br/>* `?namespaces=com.example.namespace1,com.example.namespace2`</param>
        /// <param name="timeout">Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        /// <br/>acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        /// <br/>together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.
        /// <br/>
        /// <br/>The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        /// <br/>the command resulting in setting `response-required=false`.</param>
        /// <returns>A number indicating the amount of matched things</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> CountAsync(string filter, string namespaces, string timeout, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search/things/count?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (namespaces != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("namespaces") + "=").Append(System.Uri.EscapeDataString(ConvertToString(namespaces, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. A provided parameter is in a\nwrong format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to an invalid authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request ran out of time to execute on the the back-end. Optimize your query and try again.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Processes a CloudEvent sent in Ditto Protocol
        /// </summary>
        /// <param name="ce_specversion">The CloudEvents "specversion".</param>
        /// <param name="ce_type">The CloudEvents event "type".</param>
        /// <param name="ce_source">The CloudEvents event "source".</param>
        /// <param name="ce_id">The CloudEvents event "id".</param>
        /// <param name="ce_time">The CloudEvents event "time".</param>
        /// <param name="ce_dataschema">The CloudEvents event "dataschema". If provided, this must start with `ditto:`.</param>
        /// <param name="body">The [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html) payload defining which
        /// <br/>command to process.</param>
        /// <returns>The Ditto Protocol CloudEvent was successfully parsed, the authentication was valid and also reached the persistence.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CloudeventsAsync(string ce_specversion, string ce_type, string ce_source, string ce_id, System.DateTimeOffset ce_time, string ce_dataschema, Body2 body)
        {
            return CloudeventsAsync(ce_specversion, ce_type, ce_source, ce_id, ce_time, ce_dataschema, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Processes a CloudEvent sent in Ditto Protocol
        /// </summary>
        /// <param name="ce_specversion">The CloudEvents "specversion".</param>
        /// <param name="ce_type">The CloudEvents event "type".</param>
        /// <param name="ce_source">The CloudEvents event "source".</param>
        /// <param name="ce_id">The CloudEvents event "id".</param>
        /// <param name="ce_time">The CloudEvents event "time".</param>
        /// <param name="ce_dataschema">The CloudEvents event "dataschema". If provided, this must start with `ditto:`.</param>
        /// <param name="body">The [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html) payload defining which
        /// <br/>command to process.</param>
        /// <returns>The Ditto Protocol CloudEvent was successfully parsed, the authentication was valid and also reached the persistence.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CloudeventsAsync(string ce_specversion, string ce_type, string ce_source, string ce_id, System.DateTimeOffset ce_time, string ce_dataschema, Body2 body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/cloudevents");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (ce_specversion == null)
                        throw new System.ArgumentNullException("ce_specversion");
                    request_.Headers.TryAddWithoutValidation("ce-specversion", ConvertToString(ce_specversion, System.Globalization.CultureInfo.InvariantCulture));

                    if (ce_type == null)
                        throw new System.ArgumentNullException("ce_type");
                    request_.Headers.TryAddWithoutValidation("ce-type", ConvertToString(ce_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (ce_source == null)
                        throw new System.ArgumentNullException("ce_source");
                    request_.Headers.TryAddWithoutValidation("ce-source", ConvertToString(ce_source, System.Globalization.CultureInfo.InvariantCulture));

                    if (ce_id == null)
                        throw new System.ArgumentNullException("ce_id");
                    request_.Headers.TryAddWithoutValidation("ce-id", ConvertToString(ce_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (ce_time == null)
                        throw new System.ArgumentNullException("ce_time");
                    request_.Headers.TryAddWithoutValidation("ce-time", ConvertToString(ce_time.ToString("s"), System.Globalization.CultureInfo.InvariantCulture));

                    if (ce_dataschema != null)
                        request_.Headers.TryAddWithoutValidation("ce-dataschema", ConvertToString(ce_dataschema, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.eclipse.ditto+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the CloudEvent could not be parsed as some mandatory CloudEvent headers were missing from the request\n  * the payload was missing from the CloudEvent\n  * the [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html) message could not be parsed or was missing a required field", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to missing authentication.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the caller has insufficient permissions.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed. Possible reasons:\n  * the referenced thing does not exist.\n  * the caller has insufficient permissions to perform the contained Ditto Protocol command.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The request could not be completed due to timeout.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvancedError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AdvancedError>("The `Content-Type` of the request was not supported.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The HTTP status of the error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// The message of the error - what went wrong
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A description how to fix the error or more details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A link to further information about the error and how to fix it
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvancedError
    {
        /// <summary>
        /// The HTTP status of the error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// The error code of the occurred exception
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; }

        /// <summary>
        /// The message of the error - what went wrong
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A description how to fix the error or more details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A link to further information about the error and how to fix it
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An arbitrary JSON object describing the attributes of a thing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The definitions of a feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureDefinition : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// An arbitrary JSON object describing the properties of a feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureProperties
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An arbitrary JSON object describing the desired properties of a feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureDesiredProperties
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Feature
    {
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeatureDefinition Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeatureProperties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("desiredProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeatureDesiredProperties DesiredProperties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResultThings
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Thing> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewThing
    {
        /// <summary>
        /// The initial policy to create for this thing. This will create a separate policy entity managed by resource `/policies/{thingId}`.
        /// <br/>
        /// <br/>
        /// <br/>Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_policy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Policy _policy { get; set; }

        /// <summary>
        /// This field may contain
        /// <br/>* the policy ID of an existing policy.
        /// <br/>
        /// <br/>  The policy is copied and used for this newly created thing. The
        /// <br/>  caller needs to have READ and WRITE&lt;sup&gt;*&lt;/sup&gt; access to the policy.
        /// <br/>* a placeholder reference to a thing in the format {{ ref:things/[thingId]/policyId }} where you need to
        /// <br/>  replace [thingId] with a valid thing ID.
        /// <br/>
        /// <br/>  The newly created thing will then obtain a copy of the policy of
        /// <br/>  the referenced thing. The caller needs to have READ access to the thing and READ and WRITE&lt;sup&gt;*&lt;/sup&gt;
        /// <br/>  access to the policy of the thing.
        /// <br/>
        /// <br/>
        /// <br/>&lt;sup&gt;*&lt;/sup&gt; The check for WRITE permission avoids locking yourself out of the newly created policy. You can
        /// <br/>bypass this check by setting the header `allowPolicyLockout` to `true`. Be aware that the authorized
        /// <br/>subject cannot modify the policy if you do not assign WRITE permission on the policy resource!
        /// <br/>
        /// <br/>If you want to specify a policy ID for the copied policy, use the policyId field.
        /// <br/>
        /// <br/>This field must not be used together with the field _policy. If you specify both _policy and _copyPolicyFrom
        /// <br/>this will lead to an error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_copyPolicyFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _copyPolicyFrom { get; set; }

        /// <summary>
        /// The policy ID used for controlling access to this thing. Managed by
        /// <br/>resource `/policies/{policyId}`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PolicyId { get; set; }

        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)")]
        public string Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Features Features { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Thing
    {
        /// <summary>
        /// Unique identifier representing the thing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ThingId { get; set; }

        /// <summary>
        /// The ID of the policy which controls the access to this thing. policies are managed by resource `/policies/{policyId}`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PolicyId { get; set; }

        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)")]
        public string Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Features Features { get; set; }

        /// <summary>
        /// _(read-only)_ The revision is a counter which is incremented on each modification of a Thing. This field
        /// <br/>is not returned by default but must be selected explicitly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_revision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _revision { get; set; }

        /// <summary>
        /// _(read-only)_ The created timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on creation
        /// <br/>of a Thing. This field is not returned by default but must be selected explicitly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _created { get; set; }

        /// <summary>
        /// _(read-only)_ The modified timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on each
        /// <br/>modification of a Thing. This field is not returned by default but must be selected explicitly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _modified { get; set; }

        /// <summary>
        /// _(read-only)_ The Metadata of the Thing. This field is not returned by default but must be selected explicitly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object _metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Policy consisting of policy entries
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewPolicy
    {
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PolicyEntries Entries { get; set; } = new PolicyEntries();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Policy consisting of policy entries
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy
    {
        /// <summary>
        /// Unique identifier representing the policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PolicyId { get; set; }

        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PolicyEntries Entries { get; set; } = new PolicyEntries();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Policy entries containing one policy entry for each arbitrary `label` key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyEntries
    {
        [Newtonsoft.Json.JsonProperty("label1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyEntry Label1 { get; set; }

        [Newtonsoft.Json.JsonProperty("labelN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyEntry LabelN { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Single policy entry containing Subjects and Resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyEntry
    {
        [Newtonsoft.Json.JsonProperty("subjects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Subjects Subjects { get; set; } = new Subjects();

        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Resources Resources { get; set; } = new Resources();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A SubjectEntry defines who is addressed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subjects
    {
        [Newtonsoft.Json.JsonProperty("nginx:subjectId1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubjectEntry Nginx_subjectId1 { get; set; }

        [Newtonsoft.Json.JsonProperty("nginx:subjectIdN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubjectEntry Nginx_subjectIdN { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Single (Authorization) Subject entry holding its type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubjectEntry
    {
        /// <summary>
        /// The type is offered only for documentation purposes. You are not restricted to any specific types, but we recommend to use it to specify the kind of the subject as shown in our examples.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The optional expiry timestamp (formatted in ISO-8601) indicates how long this subject should be considered active before it is automatically deleted from the Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expiry { get; set; }

        [Newtonsoft.Json.JsonProperty("announcement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubjectAnnouncement Announcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// (Authorization) Resources containing one ResourceEntry for each
    /// <br/>`type:path` key, `type` being one of the following `thing`, `policy`, `message`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resources : System.Collections.Generic.Dictionary<string, ResourceEntry>
    {

    }

    /// <summary>
    /// Single (Authorization) Resource entry defining permissions per effect.
    /// <br/>Allowed effects are `grant` and `revoke`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceEntry
    {
        [Newtonsoft.Json.JsonProperty("grant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Permission> Grant { get; set; }

        [Newtonsoft.Json.JsonProperty("revoke", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Permission> Revoke { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A Permission allows a certain action on an entity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WRITE")]
        WRITE = 1,

    }

    /// <summary>
    /// Settings for announcements to be made about the subject.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubjectAnnouncement
    {
        /// <summary>
        /// The duration before expiry when an announcement should be made.
        /// <br/>Must be a positive integer followed by one of `h` (hour), `m` (minute) or `s` (second).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beforeExpiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeforeExpiry { get; set; }

        /// <summary>
        /// Whether an announcement should be made when this subject is deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("whenDeleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WhenDeleted { get; set; }

        /// <summary>
        /// Settings to enable at-least-once delivery for policy announcements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedAcks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedAcks RequestedAcks { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of features where the key represents the `featureId` of each feature.
    /// <br/>The `featureId` key must be unique in the list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Features : System.Collections.Generic.Dictionary<string, Feature>
    {

    }

    /// <summary>
    /// Contains information about the current user and the auth subjects available for the used authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhoAmI
    {
        [Newtonsoft.Json.JsonProperty("defaultSubject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultSubject { get; set; }

        [Newtonsoft.Json.JsonProperty("subjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Subjects { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A WoT Thing Description version 1.1
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WotThingDescription
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Anonymous2> Context { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Titles { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Descriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Version Version { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Links> Links { get; set; }

        [Newtonsoft.Json.JsonProperty("security", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Security { get; set; }

        [Newtonsoft.Json.JsonProperty("securityDefinitions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> SecurityDefinitions { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonProperty("support", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Support { get; set; }

        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Modified { get; set; }

        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Forms> Forms { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Events { get; set; }

        [Newtonsoft.Json.JsonProperty("uriVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> UriVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaDefinitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> SchemaDefinitions { get; set; }

        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Profile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Channel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"twin")]
        Twin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LiveChannelTimeoutStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fail")]
        Fail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"use-twin")]
        UseTwin = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The JsonPointer to set the metadata `value` to. May start with `*/&lt;key&gt;` in order to apply the metadata to all affected JSON leaves.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The arbitrary JSON value to set as metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Channel2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"twin")]
        Twin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// Unique identifier representing the thing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ThingId { get; set; }

        /// <summary>
        /// The ID of the policy which controls the access to this thing. policies are managed by resource `/policies/{policyId}`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PolicyId { get; set; }

        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)")]
        public string Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Features Features { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// Contains information about the contents of the payload:
        /// <br/>* the affected Thing (namespace and Thing ID)
        /// <br/>* the type of operation (command/event, create/retrieve/modify/delete)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("topic", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Topic { get; set; }

        /// <summary>
        /// Additional headers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Headers Headers { get; set; }

        /// <summary>
        /// References the part of a Thing which is affected by this message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>
        /// The `value` field contains the actual payload e.g. a sensor value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("acknowledgementLabel1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AcknowledgementLabel1 AcknowledgementLabel1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedAcks
    {
        /// <summary>
        /// Acknowledgement labels to request when an announcement is published.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }

        /// <summary>
        /// How long to wait for requested announcements before retrying publication of an announcement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timeout { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"https://www.w3.org/2019/wot/td/v1")]
        Https__www_w3_org_2019_wot_td_v1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"http://www.w3.org/ns/td")]
        Http__www_w3_org_ns_td = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"https://www.w3.org/2022/wot/td/v1.1")]
        Https__www_w3_org_2022_wot_td_v1_1 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version
    {
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rel { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("anchor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Anchor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Forms
    {
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Op { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("htv:methodName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Htv_methodName { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalResponses> AdditionalResponses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Headers
    {
        /// <summary>
        /// The correlation-id header is used for linking one message with another.
        /// <br/>It typically links a reply message with its requesting message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("correlation-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcknowledgementLabel1
    {
        /// <summary>
        /// The HTTP status of the acknowledgement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        /// <summary>
        /// The payload of the acknowledgement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Payload { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalResponses
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603